#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

package Atcoder{
    use Mouse;
    use HTTP::Cookies;
    use HTTP::Request::Common;
    use LWP;
    use Data::Printer;
    use Encode;

    has browser => (
        is => 'ro',
        isa => "LWP::UserAgent"
    );

    has url => (
        is => 'ro',
        isa => "Str",
    );

    sub BUILD{
        my $self = shift;
        my $cookie_jar = HTTP::Cookies->new(
            file => "$ENV{'HOME'}/lwp_cokkies.dat",
            autosave => 1,
        );
        my $browser = LWP::UserAgent->new;
        $browser->cookie_jar($cookie_jar);
        $self->{browser} = $browser;
    }

    sub get{
        my $self = shift;
        my $url = shift;
        my $req = GET $url;
        my $res = $self->browser()->request($req);
        if($res->is_success){
            return decode("utf8",$res->content);
        }else{
            print "err:", $res->status_line, "\n";
        }
    }

    sub login{
        my $self = shift;
        my $user = shift;
        my $passwd = shift;
        my $url = $self->url() . "/login";
        $url =~ s/http/https/;
        $url =~ s|(?<!:)//|/|g;
        print "url=", $url, "\n";
        my $req = POST $url, [ name => $user, password => $passwd];
        my $res = $self->browser()->request($req);
        if($res->is_success){
            print $res->content;
        }else{
            print "err:", $res->status_line, "\n";
        }
    }

    sub getTaskSample{
        my $self = shift;
        my $url = $self->url() . "/tasks/". shift;
        $url =~ s|(?<!:)//|/|g;
        my $data = $self->get($url);
        my @t = $data=~ m|<h3>Sample Input (\d+)</h3>\s*<pre.*?>\s*(.*?)\s*</pre>.*<h3>Sample Output \1</h3>\s*<pre.*?>\s*(.*?)\s*</pre>|sg;
        my $res = [];
        for(my $i=0;$i<scalar(@t)/3;$i++){
            my $in = $t[$i*3+1];
            $in =~ s/\r\n/\n/g;
            my $out = $t[$i*3+2];
            $out =~ s/\r\n/\n/g;
            push @$res, {
                id => $t[$i * 3],
                input => $in,
                output => $out,
            };
        }
        return $res;
    }

    sub getTasks{
        my $self = shift;
        my $url = $self->url() . "/assignments";
        $url =~ s|(?<!:)//|/|g;
        my $data = $self->get($url);
        my @t = $data =~ m|href="/tasks/(.*?)">([A-Z])</a>|g;
        my $res = [];
        for(my $i=0;$i<scalar(@t)/2;$i++){
            push @$res, {
                id => $t[$i*2+1],
                url => $self->url() ."/tasks/" . $t[$i*2+0],
                sample => $self->getTaskSample($t[$i*2+0]),
            };
        }
        return $res;
    }


    sub submit{
        my $self = shift;
        my $task = shift;
        my $code = shift;
        my $url = $self->url() . "/submit";
        $url =~ s|(?<!:)//|/|g;
        $url =~ s/http/https/;
        my %taskids;
        my $sessionid;

        {
            my $submithtml = $self->browser()->request(GET $url)->content;
            $submithtml =~ m|(<select name="task_id".*?</select>)|s;
            my $taskselect = $1;
            my @s = $taskselect =~ m|<option value="(.*?)"(?: selected)?>([A-Z])|g;
            for(my $i=0; $i < scalar(@s)/2; $i++){
                $taskids{$s[$i*2+1]} = $s[$i*2+0];
            }
            $submithtml =~ m|<input type="hidden" name="__session" value="(.*?)">|;
            $sessionid = $1;
        }
        my $taskid = $taskids{$task};
        my $data = [
            task_id => $taskid,
            "language_id_" . $taskid => 2003,
            source_code => $code,
            __session => $sessionid,
        ];
        my $req = POST $url . "?task_id=". $taskid, $data;
        my $res = $self->browser()->request($req);
        if($res->is_success){
            print $res->content;
        }else{
            print "err:", $res->status_line, "\n";
            print "redirect:", $res->request->uri();
        }
    }

    __PACKAGE__->meta->make_immutable();
}

package main;
use strict;
use warnings;

use File::Slurp;
use JSON;
use Text::Diff 'diff';
use Cwd;

sub sh{
    my $script = shift;
    open(FILE, "-|", $script);
    my $ret = "";
    while(<FILE>){
        $ret .= $_;
    }
    close(FILE);
    return $ret;
}

my $command = "help";
our $atcoder;

if(scalar(@ARGV) < 1){
    $command = "help";
}else{
    $command = shift @ARGV;
}

my %commands = (
    help => sub{
        print "Usage: atcoder <commands>\n";
        exit(1);
    },
    login => sub{
        die "Usage: atcoder login <username>" if(scalar(@ARGV) < 1);
        my $user = shift @ARGV;

        system("stty -echo");
        print "Enter your password: ";
        chomp(my $passwd = <STDIN>);
        print "\n";
        system("stty echo");

        $atcoder->login($user, $passwd);
        print "Done.";
    }, 
    submit => sub{
        die "Usage: atcoder submit <task>" if(scalar(@ARGV) < 1);
        my $task = shift @ARGV;

        my $code = sh("perl preprocess.pl $task.cpp");
        $atcoder->submit($task, $code);
        print "Done.";
    },
    preload => sub{
        my $tasks = $atcoder->getTasks();
        foreach my $task(@$tasks){
            foreach my $sample(@{$task->{"sample"}}){
                write_file($task->{id} . $sample->{id} . ".in", $sample->{input} . "\n");
                write_file($task->{id} . $sample->{id} . ".out", $sample->{output} . "\n");
            }
        }
        print "Done.";
    },
    test => sub{
        die "Usage: atcoder test <task>" if(scalar(@ARGV) < 1);
        my $target = shift @ARGV;

        system("g++ $target.cpp -o $target -std=c++11") && die("compile error");

        foreach my $i(map {$_=~m|$target(\d+).in|; $1} grep {$_=~m|$target(\d+).in|} read_dir("./")){
            print "==TEST $i==\n";
            my $out = sh("./$target < $target$i.in");
            my $correct = read_file("$target$i.out");
            if($out eq $correct){
                print "OK\n";
            }else{
                print "NG\n";
                print diff(\$out, \$correct);
            }
        }
    },
    init => sub{
        if(-e ".atcoder"){
            die(".atcoder file has been exists.");
        }
        my $url = "";
        $url = shift @ARGV if(scalar(@ARGV)>0);
        $url =~ s/https/http/;
        $url =~ s|^(http://.*.atcoder.jp/).*$|$1|;
        open(FILE, ">", ".atcoder");
        print FILE <<"EOF";
{
    "url": "$url"
}
EOF
        close(FILE);
        if($url eq ""){
            print "created .atcoder file.\n";
        }else{
            print "created .atcoder file.\nurl:$url\n";
        }
    }
);

if(!defined($commands{$command}) || $command eq "help"){
    $commands{help}->();
}
if($command eq "init"){
    $commands{init}->();
    exit 0;
}

die "fatal: not a atoder directory." if(!-e ".atcoder");

our $settings;
{
    my $txt = read_file(".atcoder");
    $txt =~ s/\n//mg;
    $settings = decode_json($txt);
}

if($settings->{url} eq ""){
    die("require settings.");
}

$atcoder = Atcoder->new(url => $settings->{url});
$commands{$command}->();
