filetype off                   " (1)

if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
    call neobundle#rc(expand('~/.vim/bundle/'))
endif


NeoBundle 'operator-user'


NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'thinca/vim-quickrun'
let g:quickrun_config={'*': {'split': ''}}
nnoremap Q :<C-u>QuickRun<CR>

NeoBundle 'TwitVim'
let twitvim_enable_perl = 1
let twitvim_count = 40
nnoremap ,tp :<C-u>PosttoTwitter<CR>
nnoremap ,tf :<C-u>FriendsTwitter<CR><C-w>j
nnoremap ,tu :<C-u>UserTwitter<CR><C-w>j
nnoremap ,tr :<C-u>RepliesTwitter<CR><C-w>j
nnoremap ,tn :<C-u>NextTwitter<CR>

NeoBundle 'bufferlist.vim'
"map <silent> <C-T> :call BufferList()<CR>
nnoremap <C-C> :call BufferList()<CR>

NeoBundle 'groenewege/vim-less'
" NeoBundle 'c9s/perlomni.vim'
NeoBundle 'Shougo/vimshell'
NeoBundle 'acx0/vimcoder'
NeoBundle 'yuratomo/w3m.vim'

"command -nargs=1 Ggr W3m google <args> <CR>
"command -nargs=1 -bar Ggrn vnew | call feedkeys("\<C-w>\<C-r>") | call feedkeys(":W3m google <args> <CR><CR>") 
"nnoremap <C-g><C-g> :Ggrn <C-r><C-w> <CR>
"command -nargs=1 Weblio W3m http://ejje.weblio.jp/content/<args> <CR>
"command -nargs=1 -bar Weblion vnew | call feedkeys("\<C-w>\<C-r>") | call feedkeys(":W3m http://ejje.weblio.jp/content/<args> <CR><CR>") 
"nnoremap <C-g><C-k> :Weblion <C-r><C-w> <CR>

NeoBundle 'tpope/vim-surround'
NeoBundle 'suan/vim-instant-markdown'
NeoBundle 'deton/eblook.vim'
NeoBundle 'rhysd/wandbox-vim'

NeoBundle 'Shougo/unite.vim'
"NeoBundle 'Shougo/unite-outline'
NeoBundle 'sgur/unite-git_grep'
NeoBundle 'rhysd/unite-twitter.vim'
NeoBundle 'kmnk/vim-unite-giti'
"NeoBundle 'tsukkee/unite-tag'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'tacroe/unite-mark'
NeoBundle 'ujihisa/unite-colorscheme'
let g:unite_enable_start_insert=1
nmap <silent> <C-u>B :Unite bookmark<CR>
nmap <silent> <C-u><C-f> :Unite file<CR>
nmap <silent> <C-u><C-g> :Unite vcs_grep<CR>
nmap <silent> <C-u>b :Unite buffer<CR>
nmap <C-u><C-u> :Unite 
autocmd FileType unite call s:my_unite_settings()
function! s:my_unite_settings()
	nnoremap <silent><buffer> <C-u> <C-\><C-N>:q<CR>
	inoremap <silent><buffer> <C-u> <C-\><C-N>:q<CR>
endfunction


" NeoBundle 'haya14busa/vim-easymotion'
" map <Nul><Nul> <Plug>(easymotion-s)
" map <Nul>j <Plug>(easymotion-j)
" map <Nul>k <Plug>(easymotion-k)
" map <Nul>n <Plug>(easymotion-n)
" map <Nul>N <Plug>(easymotion-N)


NeoBundle 'Shougo/neocomplete.vim'

let g:neocomplete#enable_at_startup = 1

NeoBundle 'Rip-Rip/clang_complete'
let g:clang_use_library=1
let g:clang_library_path="/usr/lib64/llvm/"

" コマンドオプション
let g:clang_user_options = '-std=c++11'
let g:clang_auto_user_options="path, .clang_complete"

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_overwrite_completefunc = 1
let g:neocomplete#force_omni_input_patterns.c =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.cpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.objc =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.objcpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:clang_complete_auto = 0
let g:clang_auto_select = 0


" NeoBundle 'rhysd/vim-clang-format'
" let g:clang_format#style_options = {
"             \ "AccessModifierOffset" : -4,
"             \ "AllowShortIfStatementsOnASingleLine" : "true",
"             \ "AlwaysBreakTemplateDeclarations" : "true",
"             \ "Standard" : "C++11",
"             \ "BreakBeforeBraces" : "Stroustrup",
"             \ }
" map <S-D> <Plug>(operator-clang-format)
" au BufRead,BufNewFile *.c map == <Plug>(operator-clang-format) 
" au BufRead,BufNewFile *.cpp map == <Plug>(operator-clang-format) 
" au BufRead,BufNewFile *.h map == <Plug>(operator-clang-format) 
" au BufRead,BufNewFile *.hpp map == <Plug>(operator-clang-format) 
" au BufRead,BufNewFile *.cpp imap <silent>; ;<Esc><S-V><Plug>(operator-clang-format)f;a
" au BufRead,BufNewFile *.cpp imap <silent>} }<Esc>%v%<Plug>(operator-clang-format)f{%a

NeoBundle 'gregsexton/VimCalc'

NeoBundle 'sudo.vim'

NeoBundle 'tpope/vim-fugitive'
NeoBundle 'gregsexton/gitv'
nmap <C-G><C-S> :Gstatus<CR>
nmap <C-G><C-D> :Gdiff<CR>
autocmd FileType gitv call s:my_gitv_settings()
function! GitvGetCurrentHash()
	return matchstr(getline('.'), '\[\zs.\{7\}\ze\]$')
endfunction
function! s:my_gitv_settings()
	setlocal iskeyword+=/,-,.
	nnoremap <silent><buffer> C :<C-u>Git checkout <C-r><C-w><CR>
	nnoremap <buffer> <Space>rb :<C-u>Git rebase <C-r>=GitvGetCurrentHash()<CR><Space>
	nnoremap <buffer> <Space>R :<C-u>Git revert <C-r>=GitvGetCurrentHash()<CR><CR>
	nnoremap <buffer> <Space>h :<C-u>Git cherry-pick <C-r>=GitvGetCurrentHash()<CR><CR>
	nnoremap <buffer> <Space>rh :<C-u>Git reset --hard <C-r>=GitvGetCurrentHash()<CR>
endfunction

NeoBundle 'open-browser.vim'
NeoBundle 'basyura/twibill.vim'

NeoBundle 'mhinz/vim-startify'
" startifyのヘッダー部分に表示する文字列を設定する(dateコマンドを実行して日付
" を設定している)
let g:startify_custom_header = map(split(system('date'), '\n'), '"   ". v:val') + ['','']
" デフォルトだと、最近使ったファイルの先頭は数字なので、使用するアルファベットを指定
" let g:startify_custom_indices = ['f', 'g', 'h', 'r', 'i', 'o', 'b']
" よく使うファイルをブックマークとして登録しておく
let g:startify_bookmarks = [
            \ '~/.vimrc',
            \ '~/.vimrc.plugin',
            \ ]

NeoBundle 'AndrewRadev/linediff.vim'


NeoBundle 'szw/vim-tags'


NeoBundle 'LeafCage/yankround.vim'
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)


NeoBundle 'kana/vim-altr'
nmap <Leader>a <Plug>(altr-forward)

" NeoBundle 'vim-scripts/ShowMarks'
NeoBundle 'sjl/gundo.vim'
nmap <silent> U :GundoToggle<CR>

NeoBundle 'taglist.vim'
NeoBundle 'wesleyche/SrcExpl'
NeoBundle 'wesleyche/Trinity'

NeoBundle 'tyru/restart.vim'

filetype plugin indent on 
